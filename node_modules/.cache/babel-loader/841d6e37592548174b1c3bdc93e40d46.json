{"ast":null,"code":"import _slicedToArray from \"/Users/red/Desktop/lambda/projects/Sprint-Challenge-Single-Page-Apps/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/red/Desktop/lambda/projects/Sprint-Challenge-Single-Page-Apps/src/components/CharacterList.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Character from './Character.js';\nexport default function CharacterList() {\n  // to track data from useEffect\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        characters = _useState2[0],\n        setCharacters = _useState2[1];\n\n  useEffect(() => {\n    // to send the request\n    const getCharacters = () => {\n      axios.get('https://rickandmortyapi.com/api/character/') // if request was successful \n      .then(response => {\n        console.log('The response data: ', response.data.results); //to assign the received data to characters\n\n        setCharacters(response.data.results);\n      }) // if request wasn't successful\n      .catch(erroe => {\n        console.log('Can\\'t get characters data');\n      });\n    };\n\n    getCharacters();\n  }, []);\n  return React.createElement(\"section\", {\n    className: \"character-list grid-view\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, characters.map((character, key) => //  console.log(character);\n  React.createElement(Character, {\n    key: key,\n    name: character.name,\n    status: character.status,\n    species: character.species,\n    characterImg: character.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/red/Desktop/lambda/projects/Sprint-Challenge-Single-Page-Apps/src/components/CharacterList.js"],"names":["React","useEffect","useState","axios","Character","CharacterList","characters","setCharacters","getCharacters","get","then","response","console","log","data","results","catch","erroe","map","character","key","name","status","species","image"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC;AADsC,oBAEFH,QAAQ,CAAC,EAAD,CAFN;AAAA;AAAA,QAE/BI,UAF+B;AAAA,QAEnBC,aAFmB;;AAItCN,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMO,aAAa,GAAG,MAAM;AAC1BL,MAAAA,KAAK,CACJM,GADD,CACK,4CADL,EAEA;AAFA,OAGCC,IAHD,CAGMC,QAAQ,IAAG;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,QAAQ,CAACG,IAAT,CAAcC,OAAjD,EADe,CAEf;;AACAR,QAAAA,aAAa,CAACI,QAAQ,CAACG,IAAT,CAAcC,OAAf,CAAb;AACD,OAPD,EAQA;AARA,OASCC,KATD,CASOC,KAAK,IAAG;AACbL,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,OAXD;AAYD,KAbD;;AAcAL,IAAAA,aAAa;AACd,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,SAAO;AAAS,IAAA,SAAS,EAAC,0BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEJF,UAAU,CAACY,GAAX,CAAe,CAACC,SAAD,EAAYC,GAAZ,KACV;AACC,sBAAC,SAAD;AAAW,IAAA,GAAG,EAAEA,GAAhB;AAAqB,IAAA,IAAI,EAAED,SAAS,CAACE,IAArC;AAA2C,IAAA,MAAM,EAAEF,SAAS,CAACG,MAA7D;AAAqE,IAAA,OAAO,EAAEH,SAAS,CAACI,OAAxF;AAAiG,IAAA,YAAY,EAAEJ,SAAS,CAACK,KAAzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFN,CAFI,CAAP;AASD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Character from './Character.js'\n\nexport default function CharacterList() {\n  // to track data from useEffect\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    // to send the request\n    const getCharacters = () => {\n      axios\n      .get('https://rickandmortyapi.com/api/character/')\n      // if request was successful \n      .then(response =>{\n        console.log('The response data: ', response.data.results);\n        //to assign the received data to characters\n        setCharacters(response.data.results);\n      })\n      // if request wasn't successful\n      .catch(erroe =>{\n        console.log('Can\\'t get characters data');\n      })\n    }\n    getCharacters();\n  }, [])\n\n  return <section className='character-list grid-view'>\n    {/* to go over array and display each character */}\n    {characters.map((character, key) => (\n          //  console.log(character);\n           <Character key={key} name={character.name} status={character.status} species={character.species} characterImg={character.image}/>\n    ))}\n    {/* <Character/> */}\n    </section>\n\n}\n"]},"metadata":{},"sourceType":"module"}